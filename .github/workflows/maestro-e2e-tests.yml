name: Maestro E2E Tests

# This workflow runs on pull requests and can be manually triggered with Diawi URL
on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
    inputs:
      diawi_url:
        description: 'Diawi URL to download Android APK'
        required: true
        type: string
      test_file:
        description: 'Maestro test file to run (default: basic-flow.yaml)'
        required: false
        type: string
        default: 'basic-flow.yaml'

jobs:
  maestro-e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Java
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: java-gradle-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties') }}
          restore-keys: |
            java-gradle-${{ runner.os }}-

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: |
            ~/.android
            ~/android-sdk
            ~/android-sdk-linux
            ~/.android/avd
          key: android-sdk-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties') }}
          restore-keys: |
            android-sdk-${{ runner.os }}-

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0
          ndk-version: 25.1.8937393

      - name: Set up Android environment
        run: |
          echo "Setting up Android environment variables..."
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "PATH=$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$PATH" >> $GITHUB_ENV
          echo "Android environment variables set"
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"

      - name: Install System Image
        run: |
          echo "Checking if Android 30 system image is installed..."
          if $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | grep -q "system-images;android-30;default;x86_64.*installed"; then
            echo "Android 30 system image already installed"
          else
            echo "Installing Android 30 system image (faster boot)..."
            $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "system-images;android-30;default;x86_64"
            echo "System image installed successfully"
          fi

      - name: Cache Maestro CLI
        uses: actions/cache@v4
        with:
          path: ~/.maestro
          key: maestro-cli-${{ runner.os }}-v1.0
          restore-keys: |
            maestro-cli-${{ runner.os }}-

      - name: Install Maestro CLI
        run: |
          if [ ! -f "$HOME/.maestro/bin/maestro" ]; then
            echo "Installing Maestro CLI..."
            curl -Ls "https://get.maestro.mobile.dev" | bash
          else
            echo "Maestro CLI already installed (from cache)"
          fi
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH

      - name: Restart ADB Server
        run: |
          # Restart ADB server to ensure clean connection
          adb kill-server
          adb start-server
          echo "ADB server restarted"

      - name: Download APK from Diawi
        run: |
          # Use Diawi URL from manual input or default to Fyle Staging app for PR runs
          DIAWI_URL="${{ github.event.inputs.diawi_url || 'https://i.diawi.com/CZESH4' }}"
          echo "Downloading APK from: $DIAWI_URL"
          wget -O android.apk "$DIAWI_URL"
          echo "APK downloaded successfully"
          ls -la android.apk

      - name: Validate APK file
        run: |
          if [ ! -f "android.apk" ]; then
            echo "Error: android.apk file not found!"
            exit 1
          fi
          echo "APK file validation:"
          file android.apk
          echo "APK size: $(du -h android.apk)"

      - name: Verify Android tools
        run: |
          echo "Verifying Android tools are available..."
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "PATH: $PATH"
          echo "Checking emulator availability:"
          ls -la $ANDROID_HOME/emulator/emulator || echo "Emulator not found at expected location"
          echo "Checking avdmanager availability:"
          ls -la $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager || echo "avdmanager not found at expected location"
          echo "Checking sdkmanager availability:"
          ls -la $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager || echo "sdkmanager not found at expected location"

      - name: Create AVD
        run: |
          echo "Creating Android Virtual Device..."
          # List available system images
          echo "Available system images:"
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list target
          
          # Create AVD with faster Android 30 system image
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n test_avd -k "system-images;android-30;default;x86_64" --force
          
          # Verify AVD was created
          echo "Created AVDs:"
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list avd
          
          echo "AVD created successfully"

      - name: Start Emulator
        run: |
          echo "Starting emulator with conservative settings for CI..."
          # Use more conservative settings for CI reliability
          $ANDROID_HOME/emulator/emulator -avd test_avd -no-audio -no-window -gpu swiftshader_indirect -memory 1536 -partition-size 512 -verbose &
          EMULATOR_PID=$!
          echo "Emulator started with PID: $EMULATOR_PID"
          
          # Give emulator time to initialize
          sleep 15
          
          # Check if emulator process is still running
          if ps -p $EMULATOR_PID > /dev/null; then
            echo "Emulator process is running"
          else
            echo "Emulator process died, checking logs..."
            exit 1
          fi

      - name: Wait for Emulator
        run: |
          echo "Waiting for emulator to boot (with debugging)..."
          
          # First, check if emulator process is still alive
          echo "Checking emulator process..."
          ps aux | grep emulator | grep -v grep || echo "No emulator process found"
          
          # Wait for emulator to be detected with shorter intervals
          echo "Waiting for emulator detection..."
          for i in {1..60}; do
            if adb devices | grep -q "emulator.*device"; then
              echo "Emulator detected after $((i*5)) seconds"
              break
            fi
            echo "Attempt $i/60: Waiting for emulator..."
            sleep 5
          done
          
          # Check if emulator was detected
          if ! adb devices | grep -q "emulator.*device"; then
            echo "ERROR: Emulator not detected after 5 minutes"
            echo "ADB devices output:"
            adb devices
            echo "Emulator process status:"
            ps aux | grep emulator | grep -v grep
            exit 1
          fi
          
          # Wait for boot completion with shorter intervals
          echo "Waiting for boot completion..."
          for i in {1..120}; do
            if adb shell getprop sys.boot_completed 2>/dev/null | grep -q 1; then
              echo "Boot completed after $((i*5)) seconds"
              break
            fi
            echo "Boot attempt $i/120: Waiting for boot completion..."
            sleep 5
          done
          
          # Check final status
          echo "Final emulator status:"
          adb devices
          BOOT_STATUS=$(adb shell getprop sys.boot_completed 2>/dev/null || echo "failed")
          echo "Boot completed status: $BOOT_STATUS"
          
          if [ "$BOOT_STATUS" != "1" ]; then
            echo "ERROR: Boot did not complete properly"
            exit 1
          fi

      - name: Setup Emulator
        run: |
          echo "Setting up emulator..."
          # Unlock device
          adb shell input keyevent 82
          
          # Disable animations for faster testing
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0
          
          # Install APK
          echo "Installing APK..."
          adb install -r android.apk
          
          # Verify installation
          echo "Verifying APK installation..."
          adb shell pm list packages | grep fyle

      - name: Run Maestro Tests
        run: |
          TEST_FILE="${{ github.event.inputs.test_file || 'basic-flow.yaml' }}"
          echo "Running Maestro test: maestro-tests/$TEST_FILE"
          maestro test maestro-tests/$TEST_FILE --format junit --output maestro-results.xml

      - name: Stop Emulator
        if: always()
        run: |
          echo "Stopping emulator..."
          adb emu kill
          pkill -f "$ANDROID_HOME/emulator/emulator"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: maestro-test-results
          path: |
            maestro-results.xml
            maestro-tests/results/
            *.log

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Maestro Test Results
          path: maestro-results.xml
          reporter: java-junit
