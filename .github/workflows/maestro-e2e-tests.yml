name: Maestro E2E Tests

# This workflow runs on pull requests and can be manually triggered with Diawi URL
on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
    inputs:
      diawi_url:
        description: 'Diawi URL to download Android APK'
        required: true
        type: string
      test_file:
        description: 'Maestro test file to run (default: basic-flow.yaml)'
        required: false
        type: string
        default: 'basic-flow.yaml'

jobs:
  maestro-e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0
          ndk-version: 25.1.8937393

      - name: Install Maestro CLI
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH

      - name: Download APK from Diawi
        run: |
          # Use Diawi URL from manual input or default to Fyle Staging app for PR runs
          DIAWI_URL="${{ github.event.inputs.diawi_url || 'https://i.diawi.com/CZESH4' }}"
          echo "Downloading APK from: $DIAWI_URL"
          wget -O android.apk "$DIAWI_URL"
          echo "APK downloaded successfully"
          ls -la android.apk

      - name: Validate APK file
        run: |
          if [ ! -f "android.apk" ]; then
            echo "Error: android.apk file not found!"
            exit 1
          fi
          echo "APK file validation:"
          file android.apk
          echo "APK size: $(du -h android.apk)"

      - name: Setup Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          script: |
            # Wait for emulator to be ready
            adb wait-for-device
            adb shell input keyevent 82
            
            # Install the APK on the emulator
            echo "Installing APK on emulator..."
            adb install android.apk
            
            # Run Maestro tests
            TEST_FILE="${{ github.event.inputs.test_file || 'basic-flow.yaml' }}"
            echo "Running Maestro test: maestro-tests/$TEST_FILE"
            maestro test maestro-tests/$TEST_FILE --format junit --output maestro-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: maestro-test-results
          path: |
            maestro-results.xml
            maestro-tests/results/
            *.log

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Maestro Test Results
          path: maestro-results.xml
          reporter: java-junit
