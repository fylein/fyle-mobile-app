name: Maestro E2E Tests

# This workflow runs on pull requests and can be manually triggered with Diawi URL
on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
    inputs:
      diawi_url:
        description: 'Diawi URL to download Android APK'
        required: true
        type: string
      test_file:
        description: 'Maestro test file to run (default: basic-flow.yaml)'
        required: false
        type: string
        default: 'basic-flow.yaml'

jobs:
  maestro-e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Java
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: java-gradle-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties') }}
          restore-keys: |
            java-gradle-${{ runner.os }}-

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: |
            ~/.android
            ~/android-sdk
            ~/android-sdk-linux
          key: android-sdk-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties') }}
          restore-keys: |
            android-sdk-${{ runner.os }}-

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0
          ndk-version: 25.1.8937393

      - name: Cache Maestro CLI
        uses: actions/cache@v4
        with:
          path: ~/.maestro
          key: maestro-cli-${{ runner.os }}-v1.0
          restore-keys: |
            maestro-cli-${{ runner.os }}-

      - name: Install Maestro CLI
        run: |
          if [ ! -f "$HOME/.maestro/bin/maestro" ]; then
            echo "Installing Maestro CLI..."
            curl -Ls "https://get.maestro.mobile.dev" | bash
          else
            echo "Maestro CLI already installed (from cache)"
          fi
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH

      - name: Restart ADB Server
        run: |
          # Restart ADB server to ensure clean connection
          adb kill-server
          adb start-server
          echo "ADB server restarted"

      - name: Download APK from Diawi
        run: |
          # Use Diawi URL from manual input or default to Fyle Staging app for PR runs
          DIAWI_URL="${{ github.event.inputs.diawi_url || 'https://i.diawi.com/CZESH4' }}"
          echo "Downloading APK from: $DIAWI_URL"
          wget -O android.apk "$DIAWI_URL"
          echo "APK downloaded successfully"
          ls -la android.apk

      - name: Validate APK file
        run: |
          if [ ! -f "android.apk" ]; then
            echo "Error: android.apk file not found!"
            exit 1
          fi
          echo "APK file validation:"
          file android.apk
          echo "APK size: $(du -h android.apk)"

      - name: Create AVD
        run: |
          echo "Creating Android Virtual Device..."
          echo "no" | avdmanager create avd -n test_avd -k "system-images;android-34;google_apis;x86_64" --force
          echo "AVD created successfully"

      - name: Start Emulator
        run: |
          echo "Starting emulator..."
          emulator -avd test_avd -no-audio -no-window -gpu swiftshader_indirect -memory 2048 -partition-size 1024 &
          echo "Emulator started in background"

      - name: Wait for Emulator
        run: |
          echo "Waiting for emulator to boot..."
          # Wait for emulator to be detected
          timeout 300 bash -c 'until adb devices | grep -q "emulator.*device"; do sleep 5; echo "Waiting for emulator..."; done'
          
          # Wait for boot completion
          echo "Waiting for boot completion..."
          timeout 300 bash -c 'until adb shell getprop sys.boot_completed | grep -q 1; do sleep 5; echo "Waiting for boot..."; done'
          
          # Additional wait for system to stabilize
          echo "Waiting for system to stabilize..."
          sleep 30
          
          # Check final status
          echo "Final emulator status:"
          adb devices
          adb shell getprop sys.boot_completed

      - name: Setup Emulator
        run: |
          echo "Setting up emulator..."
          # Unlock device
          adb shell input keyevent 82
          
          # Disable animations for faster testing
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0
          
          # Install APK
          echo "Installing APK..."
          adb install -r android.apk
          
          # Verify installation
          echo "Verifying APK installation..."
          adb shell pm list packages | grep fyle

      - name: Run Maestro Tests
        run: |
          TEST_FILE="${{ github.event.inputs.test_file || 'basic-flow.yaml' }}"
          echo "Running Maestro test: maestro-tests/$TEST_FILE"
          maestro test maestro-tests/$TEST_FILE --format junit --output maestro-results.xml

      - name: Stop Emulator
        if: always()
        run: |
          echo "Stopping emulator..."
          adb emu kill
          pkill -f emulator

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: maestro-test-results
          path: |
            maestro-results.xml
            maestro-tests/results/
            *.log

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Maestro Test Results
          path: maestro-results.xml
          reporter: java-junit
